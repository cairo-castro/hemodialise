import{d as Q,r as C,c as B,o as W,B as O,q as u,x as r,y as e,v as o,H as w,t,n as p,J as f,G as i,K as I,F as X,L as Y,z as Z,C as R}from"./vendor-BOCCj2ty.js";import{e as ee,m as se,o as D,x as te,n as ae,k as y,g as c,p as oe,q as ne,r as ie,f as re,y as le,z as ce,i as ue,l as de,w as he,t as M}from"./ionic-ZHEFjxIb.js";import{x as pe,y as me,t as _e,q as fe,z as S,m as ve,p as ge,d as Ce,A as ye,_ as ke}from"./_plugin-vue_export-helper-B7Fc93E3.js";import{C as we}from"./main-BjygRkaH.js";import{u as Ie}from"./useStatsAutoRefresh-XtyE76FL.js";const Pe={class:"header-gradient"},be={class:"header-content"},$e={key:0,class:"unit-info"},xe={class:"status-indicators"},Te={class:"content-container"},Be={key:0,class:"checklists-section"},Oe=["onClick"],Re={class:"card-content"},De={class:"checklist-info"},Me={class:"machine-section"},Se={class:"machine-icon"},ze={class:"machine-details"},Ae={class:"machine-id"},Ee={class:"patient-section"},Ue={class:"patient-icon"},Ne={class:"patient-details"},je={class:"phase-info"},Le={class:"checklist-actions"},qe={class:"status-section"},Fe={class:"progress-text"},Ve={class:"time-info"},He={class:"time-label"},Ge={key:0,class:"paused-indicator"},Je={key:1,class:"empty-state"},Ke={class:"empty-content"},Qe={key:2,class:"loading-state"},We=Q({__name:"ChecklistListPage",setup(Xe){const P=Z(),z=we.getInstance().getCurrentUserUseCase(),v=C(!1),k=C(null),d=C([]),m=C([]),b=B(()=>m.value.filter(s=>s.status==="available").length),A=B(()=>m.value.filter(s=>s.status==="occupied").length),E=async()=>{try{k.value=await z.execute()}catch(s){console.error("Error loading user:",s)}},U=async()=>{try{const a=await(await fetch("/api/checklists/active",{headers:{Authorization:"Bearer ".concat(localStorage.getItem("auth_token"))}})).json();a.success&&(d.value=a.checklists)}catch(s){console.error("Erro ao carregar checklists ativos:",s)}},N=async()=>{try{const s=await fetch("/api/machines",{headers:{Authorization:"Bearer ".concat(localStorage.getItem("auth_token")),"Content-Type":"application/json",Accept:"application/json"}});if(!s.ok){console.warn("Failed to load machines: ".concat(s.status)),m.value=[];return}const a=await s.json();a.success&&a.machines?m.value=a.machines:m.value=[]}catch(s){console.error("Erro ao carregar máquinas:",s),m.value=[]}},g=async()=>{v.value=!0;try{await Promise.all([U(),N()])}finally{v.value=!1}},{isRefreshing:$,forceRefresh:j}=Ie(g,{loadOnMount:!1,interval:15e3,onStatsUpdated:()=>{console.log("[ChecklistList] Stats atualizados automaticamente")}}),L=async s=>{await j(),s.target.complete()},x=s=>{P.push("/checklist/".concat(s.id))},q=async s=>{await(await de.create({header:"Pausar Checklist",message:"Deseja pausar o checklist da máquina ".concat(s.machine.name,"?"),buttons:[{text:"Cancelar",role:"cancel"},{text:"Pausar",handler:async()=>{const h=await he.create({message:"Pausando checklist..."});await h.present();try{const l=await(await fetch("/api/checklists/".concat(s.id,"/pause"),{method:"POST",headers:{Authorization:"Bearer ".concat(localStorage.getItem("auth_token"))}})).json();if(l.success)await(await M.create({message:"Checklist pausado com sucesso.",duration:3e3,color:"success"})).present(),await g();else throw new Error(l.message)}catch(n){await(await M.create({message:"Erro ao pausar checklist.",duration:3e3,color:"danger"})).present()}finally{await h.dismiss()}}}]})).present()},T=()=>{P.push("/checklist/new")},F=s=>({pre_dialysis:"Pré-Diálise",during_session:"Durante Sessão",post_dialysis:"Pós-Diálise",completed:"Concluído",interrupted:"Interrompido"})[s]||s,V=s=>({pre_dialysis:"primary",during_session:"warning",post_dialysis:"secondary",completed:"success",interrupted:"danger"})[s]||"medium",H=s=>s.replace("_","-"),G=s=>s.phase_completion!==void 0?Math.round(s.phase_completion):{pre_dialysis:25,during_session:50,post_dialysis:75,completed:100,interrupted:0}[s.current_phase]||0,J=s=>{const a=new Date(s),n=new Date().getTime()-a.getTime(),l=Math.floor(n/(1e3*60*60)),_=Math.floor(n%(1e3*60*60)/(1e3*60));return l>0?"".concat(l,"h ").concat(_,"m"):"".concat(_,"m")},K=s=>{const a=new Date(s),n=new Date().getTime()-a.getTime(),l=Math.floor(n/(1e3*60*60)),_=Math.floor(n%(1e3*60*60)/(1e3*60));return l>0?"".concat(l,"h ").concat(_,"m"):"".concat(_,"m")};return W(async()=>{await E(),await g()}),(s,a)=>(u(),O(e(ee),null,{default:r(()=>[o(e(oe),null,{default:r(()=>[o(e(se),{color:"primary"},{default:r(()=>[o(e(D),{slot:"start"},{default:r(()=>[o(e(te),{"default-href":"/dashboard"})]),_:1}),o(e(ae),null,{default:r(()=>[...a[0]||(a[0]=[w("Checklists Ativos",-1)])]),_:1}),o(e(D),{slot:"end"},{default:r(()=>[o(e(y),{onClick:g,disabled:v.value},{default:r(()=>[o(e(c),{icon:e(pe)},null,8,["icon"])]),_:1},8,["disabled"])]),_:1})]),_:1})]),_:1}),o(e(ue),{fullscreen:!0},{default:r(()=>{var h;return[o(e(ne),{slot:"fixed",onIonRefresh:L},{default:r(()=>[o(e(ie))]),_:1}),t("div",Pe,[t("div",be,[k.value?(u(),p("div",$e,[t("h2",null,i(((h=k.value.unit)==null?void 0:h.name)||"Unidade de Hemodiálise"),1),t("p",null,i(d.value.length)+" checklist"+i(d.value.length!==1?"s":"")+" "+i(d.value.length===1?"ativo":"ativos"),1)])):f("",!0),t("div",xe,[t("div",{class:I(["status-item available",{updating:e($)}])},[o(e(c),{icon:e(me)},null,8,["icon"]),t("span",null,i(b.value)+" Disponível"+i(b.value!==1?"is":""),1)],2),t("div",{class:I(["status-item occupied",{updating:e($)}])},[o(e(c),{icon:e(_e)},null,8,["icon"]),t("span",null,i(A.value)+" Em Uso",1)],2)])])]),t("div",Te,[d.value.length>0?(u(),p("div",Be,[(u(!0),p(X,null,Y(d.value,n=>(u(),p("div",{key:n.id,class:"checklist-card",onClick:l=>x(n)},[t("div",Re,[t("div",De,[t("div",Me,[t("div",Se,[o(e(c),{icon:e(ve)},null,8,["icon"])]),t("div",ze,[t("h3",null,i(n.machine.name),1),t("p",Ae,i(n.machine.identifier),1)])]),t("div",Ee,[t("div",Ue,[o(e(c),{icon:e(ge)},null,8,["icon"])]),t("div",Ne,[t("h4",null,i(n.patient.name),1),t("p",je,i(F(n.current_phase)),1)])])]),t("div",Le,[t("div",qe,[t("div",{class:I(["progress-circle",H(n.current_phase)])},[t("span",Fe,i(G(n))+"%",1)],2),t("div",Ve,[t("span",He,i(J(n.created_at)),1)])]),o(e(y),{color:V(n.current_phase),size:"small",class:"action-button",onClick:R(l=>x(n),["stop"])},{default:r(()=>[w(i(n.paused_at?"RETOMAR":"CONTINUAR"),1)]),_:2},1032,["color","onClick"]),n.paused_at?f("",!0):(u(),O(e(y),{key:0,fill:"clear",size:"small",color:"medium",onClick:R(l=>q(n),["stop"]),class:"pause-btn"},{default:r(()=>[o(e(c),{icon:e(Ce),slot:"icon-only"},null,8,["icon"])]),_:1},8,["onClick"]))])]),n.paused_at?(u(),p("div",Ge,[o(e(c),{icon:e(ye)},null,8,["icon"]),t("span",null,"Pausado há "+i(K(n.paused_at)),1)])):f("",!0)],8,Oe))),128))])):f("",!0),d.value.length===0&&!v.value?(u(),p("div",Je,[t("div",Ke,[o(e(c),{icon:e(fe),class:"empty-icon"},null,8,["icon"]),a[2]||(a[2]=t("h3",null,"Nenhum checklist ativo",-1)),a[3]||(a[3]=t("p",null,"Inicie um novo checklist de segurança para começar.",-1)),o(e(y),{color:"primary",onClick:T,class:"start-button"},{default:r(()=>[o(e(c),{icon:e(S),slot:"start"},null,8,["icon"]),a[1]||(a[1]=w(" Iniciar Checklist ",-1))]),_:1})])])):f("",!0),v.value?(u(),p("div",Qe,[o(e(re),{name:"crescent"}),a[4]||(a[4]=t("p",null,"Carregando checklists...",-1))])):f("",!0)]),o(e(le),{vertical:"bottom",horizontal:"end",slot:"fixed"},{default:r(()=>[o(e(ce),{color:"primary",onClick:T,class:"add-fab"},{default:r(()=>[o(e(c),{icon:e(S)},null,8,["icon"])]),_:1})]),_:1})]}),_:1})]),_:1}))}}),os=ke(We,[["__scopeId","data-v-31b73dec"]]);export{os as default};
