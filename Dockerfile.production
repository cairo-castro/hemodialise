# ==============================================
# DOCKERFILE PRODUÇÃO - SISTEMA HEMODIÁLISE
# Optimized for Dokploy with DevOps Best Practices
# Domain: qualidadehd.direcaoclinica.com.br
# ==============================================

# ==============================================
# Stage 1: Build Node.js Assets (Frontend)
# ==============================================
FROM node:20-alpine AS node-builder

WORKDIR /build

# Update npm to latest version
RUN npm install -g npm@latest

# Copy dependency files only (better caching)
COPY package.json package-lock.json ./

# Install dependencies with cache optimization
RUN --mount=type=cache,target=/root/.npm \
    npm ci --legacy-peer-deps --no-audit --no-fund

# Copy source files for build
COPY resources/ ./resources/
COPY public/ ./public/
COPY vite.config.js ./vite.config.js
COPY tsconfig.json ./tsconfig.json
COPY ionic-frontend/ ./ionic-frontend/

# Create placeholder directories for Tailwind @source paths
# These are referenced in app.css but not needed during build
RUN mkdir -p vendor/laravel/framework/src/Illuminate/Pagination/resources/views \
    storage/framework/views

# Create output directories before build
RUN mkdir -p public/build public/desktop public/mobile-assets

# Build 1: Default/Filament Assets
RUN echo "=== Building Default/Filament Assets ===" && \
    npm run build && \
    echo "✅ Default build completed" && \
    ls -la public/build/

# Build 2: Desktop Assets
RUN echo "=== Building Desktop Assets ===" && \
    npm run build:desktop && \
    echo "✅ Desktop build completed" && \
    ls -la public/desktop/

# Build 3: Mobile Assets
RUN echo "=== Building Mobile Assets ===" && \
    npm run build:mobile && \
    echo "✅ Mobile build completed" && \
    ls -la public/mobile-assets/

# Verify all builds completed
RUN echo "=== All Frontend Builds Completed ===" && \
    ls -la public/build/ public/desktop/ public/mobile-assets/

# ==============================================
# Stage 2: PHP Composer Dependencies
# ==============================================
FROM php:8.3-cli-alpine AS composer-builder

WORKDIR /build

# Install runtime libraries FIRST (must persist after build-deps are removed)
RUN apk add --no-cache \
    libzip \
    icu-libs \
    icu-data-full \
    git \
    unzip

# Install build dependencies and PHP extensions
RUN apk add --no-cache --virtual .build-deps \
    libzip-dev \
    icu-dev \
    && docker-php-ext-install -j$(nproc) \
        zip \
        intl \
        bcmath \
    && apk del .build-deps \
    && rm -rf /var/cache/apk/* /tmp/*

# Verify extensions are loaded
RUN php -m | grep -E 'zip|intl|bcmath'

# Copy Composer binary from official image
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Verify Composer installation
RUN composer --version

# Copy dependency files only (better caching)
COPY composer.json composer.lock ./

# Copy application code BEFORE composer install
# This is needed because post-autoload-dump scripts require Laravel bootstrap
COPY . .

# Install PHP dependencies with optimizations
# Note: We keep --no-scripts here and run scripts manually to control the flow
RUN --mount=type=cache,target=/tmp/composer \
    composer install \
        --no-dev \
        --no-interaction \
        --no-scripts \
        --no-progress \
        --prefer-dist \
        --optimize-autoloader \
        --classmap-authoritative \
    && echo "✅ Dependencies installed"

# Now run the autoload optimization with scripts
# This will execute post-autoload-dump hooks (package:discover, filament:upgrade)
RUN composer dump-autoload \
        --optimize \
        --classmap-authoritative \
        --no-dev \
    && echo "✅ Autoload optimized successfully!" \
    && ls -lah vendor/composer/autoload_*.php

# ==============================================
# Stage 3: Production Runtime (MariaDB Support)
# ==============================================
FROM php:8.3-fpm-alpine AS production

# Metadata
LABEL maintainer="Sistema Hemodiálise - Qualidade" \
      version="3.3" \
      description="Sistema de Gestão de Hemodiálise - Dokploy Production (Fixed Vite Manifest)" \
      org.opencontainers.image.source="https://github.com/cairo-castro/hemodialise"

# Force cache invalidation for Vite manifest fix - 2025-10-27
RUN echo "Build timestamp: 2025-10-27-1600-VITE-FIX"

# Set environment defaults (can be overridden by Dokploy)
ENV APP_ENV=production \
    PHP_OPCACHE_ENABLE=1 \
    PHP_OPCACHE_VALIDATE_TIMESTAMPS=0

# Install runtime dependencies and PHP extensions in single layer
RUN apk add --no-cache \
    # Web servers & process management
    nginx \
    supervisor \
    # Database client
    mariadb-client \
    # Runtime libraries
    libzip \
    libpng \
    libjpeg-turbo \
    freetype \
    oniguruma \
    icu-libs \
    icu-data-full \
    # Composer dependencies
    git \
    unzip \
    # Utilities
    curl \
    bash \
    su-exec \
    netcat-openbsd \
    && apk add --no-cache --virtual .build-deps \
        libzip-dev \
        libpng-dev \
        libjpeg-turbo-dev \
        freetype-dev \
        oniguruma-dev \
        icu-dev \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) \
        pdo_mysql \
        mysqli \
        zip \
        gd \
        mbstring \
        opcache \
        bcmath \
        exif \
        intl \
    && apk del .build-deps \
    && rm -rf /var/cache/apk/* /tmp/*

# Copy Composer binary for production maintenance
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Verify Composer is available
RUN composer --version && echo "✅ Composer installed for production maintenance"

# Configure PHP OPcache for production performance
RUN { \
    echo '[opcache]'; \
    echo 'opcache.enable=1'; \
    echo 'opcache.memory_consumption=256'; \
    echo 'opcache.interned_strings_buffer=16'; \
    echo 'opcache.max_accelerated_files=20000'; \
    echo 'opcache.validate_timestamps=0'; \
    echo 'opcache.save_comments=1'; \
    echo 'opcache.fast_shutdown=1'; \
    echo 'opcache.enable_cli=0'; \
    } > /usr/local/etc/php/conf.d/opcache.ini

# Configure PHP for production
RUN { \
    echo '[PHP]'; \
    echo 'memory_limit=512M'; \
    echo 'upload_max_filesize=50M'; \
    echo 'post_max_size=50M'; \
    echo 'max_execution_time=300'; \
    echo 'max_input_time=300'; \
    echo 'max_input_vars=3000'; \
    echo 'expose_php=Off'; \
    echo 'display_errors=Off'; \
    echo 'display_startup_errors=Off'; \
    echo 'log_errors=On'; \
    echo 'error_reporting=E_ALL & ~E_DEPRECATED & ~E_STRICT'; \
    echo 'date.timezone=America/Sao_Paulo'; \
    } > /usr/local/etc/php/conf.d/production.ini

# Create non-root user for security
RUN addgroup -g 1000 laravel && \
    adduser -D -u 1000 -G laravel laravel

# Set working directory
WORKDIR /var/www/html

# Copy application code (exclude patterns in .dockerignore)
COPY --chown=laravel:laravel . .

# Copy built dependencies from previous stages
COPY --from=composer-builder --chown=laravel:laravel /build/vendor ./vendor

# Copy ALL frontend build outputs (desktop, build, mobile-assets)
# This ensures we get the assets regardless of where Vite places them
COPY --from=node-builder --chown=laravel:laravel /build/public/ ./public/

# ⚠️  IMPORTANT: Environment Variables
# All configuration is injected by Dokploy at runtime via Environment Variables
# No .env file is copied to maintain security and follow 12-factor app methodology
# Configure variables in: Dokploy UI > Projects > qualidade > Environment Variables
# See DOKPLOY-ENV-GUIDE.md for complete setup instructions

# Create required directories with correct permissions
RUN mkdir -p \
    storage/framework/cache/data \
    storage/framework/sessions \
    storage/framework/views \
    storage/framework/testing \
    storage/logs \
    storage/app/public \
    bootstrap/cache \
    public/build \
    public/desktop \
    public/mobile-assets \
    && chown -R laravel:laravel storage bootstrap/cache public/build public/desktop public/mobile-assets \
    && chmod -R 775 storage bootstrap/cache \
    && chmod -R 755 public \
    && find storage -type f -exec chmod 664 {} \; 2>/dev/null || true \
    && find bootstrap/cache -type f -exec chmod 664 {} \; 2>/dev/null || true

# Configure Nginx
COPY --chown=root:root docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY --chown=root:root docker/nginx/default.conf /etc/nginx/http.d/default.conf

# Configure Supervisor
COPY --chown=root:root docker/supervisor/supervisord.conf /etc/supervisord.conf

# Configure PHP-FPM for production with TCP (fallback due to Dokploy cache issues)
# NOTE: Unix socket is better (10-15% faster), but Dokploy persistent cache prevents proper build
# TODO: Revert to Unix socket when we can force --no-cache builds in Dokploy
# CACHE BUST: 2025-10-23-1910-TCP-FALLBACK
RUN echo "Configuring PHP-FPM with TCP - Build: 2025-10-23-1910-TCP-FALLBACK" && \
    sed -i 's/user = www-data/user = laravel/g' /usr/local/etc/php-fpm.d/www.conf && \
    sed -i 's/group = www-data/group = laravel/g' /usr/local/etc/php-fpm.d/www.conf && \
    { \
        # PHP-FPM process manager optimization
        echo 'pm = dynamic'; \
        echo 'pm.max_children = 50'; \
        echo 'pm.start_servers = 5'; \
        echo 'pm.min_spare_servers = 5'; \
        echo 'pm.max_spare_servers = 15'; \
        echo 'pm.max_requests = 500'; \
        echo 'pm.process_idle_timeout = 10s'; \
    } >> /usr/local/etc/php-fpm.d/www.conf && \
    echo "PHP-FPM TCP configuration completed - listening on 127.0.0.1:9000"

# Copy and set permissions for entrypoint script
COPY --chown=root:root --chmod=755 docker/entrypoint.production.sh /usr/local/bin/entrypoint.sh
COPY --chown=root:root --chmod=755 docker/validate-env.sh /var/www/html/docker/validate-env.sh

# Expose HTTP port
EXPOSE 80

# Health check with proper configuration
HEALTHCHECK --interval=30s \
            --timeout=10s \
            --start-period=60s \
            --retries=3 \
    CMD curl -f http://localhost/up || exit 1

# Entrypoint and command
# Note: Runs as root initially for supervisor/nginx, then drops to laravel user via su-exec
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
