# ==============================================
# DOCKERFILE PRODUÇÃO - SISTEMA HEMODIÁLISE
# Otimizado para Dokploy com MariaDB
# Domain: qualidadehd.direcaoclinica.com.br
# ==============================================

# ==============================================
# Stage 1: Build Node.js Assets (Frontend)
# ==============================================
FROM node:20-alpine AS node-builder

WORKDIR /app

# Copy package files for better layer caching
COPY package*.json ./

# Install Node dependencies (production only)
RUN npm ci --only=production --no-audit --no-fund

# Copy source code
COPY resources ./resources
COPY public ./public
COPY vite.config.js ./
COPY tsconfig.json ./
COPY ionic-frontend ./ionic-frontend

# Build production assets (mobile + desktop)
RUN npm run build:mobile && npm run build

# ==============================================
# Stage 2: PHP Composer Dependencies
# ==============================================
FROM composer:2 AS composer-builder

WORKDIR /app

# Copy composer files
COPY composer.json composer.lock ./

# Install PHP dependencies (production only, optimized)
RUN composer install \
    --no-dev \
    --no-interaction \
    --no-scripts \
    --no-progress \
    --prefer-dist \
    --optimize-autoloader \
    --classmap-authoritative

# ==============================================
# Stage 3: Production Runtime (MariaDB Support)
# ==============================================
FROM php:8.2-fpm-alpine AS production

LABEL maintainer="Sistema Hemodiálise - Qualidade"
LABEL version="1.0"
LABEL description="Sistema de Gestão de Hemodiálise - Produção Dokploy"

# Install system dependencies
RUN apk add --no-cache \
    nginx \
    supervisor \
    mariadb-client \
    libzip-dev \
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    oniguruma-dev \
    curl \
    zip \
    unzip \
    git \
    bash \
    su-exec \
    netcat-openbsd

# Install PHP extensions (MariaDB/MySQL support)
RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) \
    pdo \
    pdo_mysql \
    mysqli \
    zip \
    gd \
    mbstring \
    opcache \
    bcmath \
    exif

# Configure OPcache for production (aggressive caching)
RUN { \
    echo 'opcache.enable=1'; \
    echo 'opcache.memory_consumption=256'; \
    echo 'opcache.interned_strings_buffer=16'; \
    echo 'opcache.max_accelerated_files=20000'; \
    echo 'opcache.validate_timestamps=0'; \
    echo 'opcache.save_comments=1'; \
    echo 'opcache.fast_shutdown=1'; \
    echo 'opcache.enable_cli=0'; \
    echo 'opcache.revalidate_freq=0'; \
    } > /usr/local/etc/php/conf.d/opcache-prod.ini

# Configure PHP for production
RUN { \
    echo 'memory_limit=512M'; \
    echo 'upload_max_filesize=50M'; \
    echo 'post_max_size=50M'; \
    echo 'max_execution_time=300'; \
    echo 'max_input_time=300'; \
    echo 'max_input_vars=3000'; \
    echo 'expose_php=Off'; \
    echo 'display_errors=Off'; \
    echo 'display_startup_errors=Off'; \
    echo 'log_errors=On'; \
    echo 'error_log=/var/www/html/storage/logs/php_errors.log'; \
    echo 'date.timezone=America/Sao_Paulo'; \
    } > /usr/local/etc/php/conf.d/production.ini

# Create non-root user
RUN addgroup -g 1000 laravel \
    && adduser -D -u 1000 -G laravel laravel

# Set working directory
WORKDIR /var/www/html

# Copy application code
COPY --chown=laravel:laravel . .

# Copy Composer dependencies
COPY --from=composer-builder --chown=laravel:laravel /app/vendor ./vendor

# Copy built assets from Node stage
COPY --from=node-builder --chown=laravel:laravel /app/public/build ./public/build
COPY --from=node-builder --chown=laravel:laravel /app/public/mobile-assets ./public/mobile-assets
COPY --from=node-builder --chown=laravel:laravel /app/public/ionic-build ./public/ionic-build

# Create required directories with proper permissions
RUN mkdir -p \
    storage/framework/cache/data \
    storage/framework/sessions \
    storage/framework/views \
    storage/framework/testing \
    storage/logs \
    storage/app/public \
    bootstrap/cache \
    && chown -R laravel:laravel storage bootstrap/cache \
    && chmod -R 775 storage bootstrap/cache \
    && chmod -R 755 public

# Configure Nginx for production
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.conf /etc/nginx/http.d/default.conf

# Configure Supervisor
COPY docker/supervisor/supervisord.conf /etc/supervisord.conf

# Configure PHP-FPM to run as laravel user
RUN sed -i 's/user = www-data/user = laravel/g' /usr/local/etc/php-fpm.d/www.conf \
    && sed -i 's/group = www-data/group = laravel/g' /usr/local/etc/php-fpm.d/www.conf \
    && sed -i 's/listen = 127.0.0.1:9000/listen = \/var\/run\/php-fpm.sock/g' /usr/local/etc/php-fpm.d/www.conf \
    && sed -i 's/;listen.owner = www-data/listen.owner = laravel/g' /usr/local/etc/php-fpm.d/www.conf \
    && sed -i 's/;listen.group = www-data/listen.group = laravel/g' /usr/local/etc/php-fpm.d/www.conf \
    && sed -i 's/;listen.mode = 0660/listen.mode = 0660/g' /usr/local/etc/php-fpm.d/www.conf

# Optimize PHP-FPM for production
RUN echo 'pm = dynamic' >> /usr/local/etc/php-fpm.d/www.conf \
    && echo 'pm.max_children = 50' >> /usr/local/etc/php-fpm.d/www.conf \
    && echo 'pm.start_servers = 5' >> /usr/local/etc/php-fpm.d/www.conf \
    && echo 'pm.min_spare_servers = 5' >> /usr/local/etc/php-fpm.d/www.conf \
    && echo 'pm.max_spare_servers = 15' >> /usr/local/etc/php-fpm.d/www.conf \
    && echo 'pm.max_requests = 500' >> /usr/local/etc/php-fpm.d/www.conf

# Copy and configure production entrypoint script
COPY docker/entrypoint.production.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Expose HTTP port
EXPOSE 80

# Health check endpoint (Dokploy compatible)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/up || exit 1

# Entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Start supervisor (controlled by entrypoint)
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
