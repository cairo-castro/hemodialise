# ==============================================
# DOCKERFILE PRODUÇÃO - SISTEMA HEMODIÁLISE
# Otimizado para Dokploy com MariaDB
# Domain: qualidadehd.direcaoclinica.com.br
# ==============================================

# ==============================================
# Stage 1: Build Node.js Assets (Frontend)
# ==============================================
FROM node:20-alpine AS node-builder

WORKDIR /build

# Copiar arquivos de dependências
COPY package.json package-lock.json ./

# Instalar todas as dependências (incluindo devDependencies) para poder compilar
RUN npm ci --legacy-peer-deps && \
    rm -rf /tmp/npm-cache

# Copiar arquivos necessários para o build
COPY resources/ ./resources/
COPY public/ ./public/
COPY vite.config.js ./vite.config.js
COPY tsconfig.json ./tsconfig.json
COPY ionic-frontend/ ./ionic-frontend/

# Build dos assets de produção
RUN npm run build:desktop && \
    npm run build:mobile

# Verificar se os diretórios de build foram criados corretamente
RUN ls -la public/ && \
    ls -la public/desktop/ && \
    ls -la public/mobile-assets/

# ==============================================
# Stage 2: PHP Composer Dependencies
# ==============================================
FROM php:8.3-cli-alpine AS composer-builder

WORKDIR /build

# Instalar dependências do sistema necessárias
RUN apk add --no-cache \
    libzip-dev \
    libpng-dev \
    icu-dev \
    git

# Instalar extensões PHP necessárias
RUN docker-php-ext-install -j$(nproc) \
    zip \
    intl \
    bcmath

# Copiar binário do Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Copiar arquivos de dependências
COPY composer.json composer.lock ./

# Instalar dependências PHP (production only)
RUN composer install \
    --no-dev \
    --no-interaction \
    --no-scripts \
    --no-progress \
    --prefer-dist \
    --optimize-autoloader \
    --classmap-authoritative

# ==============================================
# Stage 3: Production Runtime (MariaDB Support)
# ==============================================
FROM php:8.3-fpm-alpine AS production

LABEL maintainer="Sistema Hemodiálise - Qualidade"
LABEL version="2.0"
LABEL description="Sistema de Gestão de Hemodiálise - Produção Dokploy"

# Instalar dependências do sistema
RUN apk add --no-cache \
    nginx \
    supervisor \
    mariadb-client \
    libzip-dev \
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    oniguruma-dev \
    icu-dev \
    curl \
    bash \
    su-exec \
    netcat-openbsd

# Instalar extensões PHP (MariaDB/MySQL support) - otimizado
RUN docker-php-ext-configure gd --with-freetype --with-jpeg && \
    docker-php-ext-install -j$(nproc) \
        pdo_mysql \
        mysqli \
        zip \
        gd \
        mbstring \
        opcache \
        bcmath \
        exif \
        intl

# Configurar OPcache para produção (performance)
RUN { \
    echo 'opcache.enable=1'; \
    echo 'opcache.memory_consumption=256'; \
    echo 'opcache.interned_strings_buffer=16'; \
    echo 'opcache.max_accelerated_files=20000'; \
    echo 'opcache.validate_timestamps=0'; \
    echo 'opcache.save_comments=1'; \
    echo 'opcache.fast_shutdown=1'; \
    } > /usr/local/etc/php/conf.d/opcache.ini

# Configuração PHP para produção
RUN { \
    echo 'memory_limit=512M'; \
    echo 'upload_max_filesize=50M'; \
    echo 'post_max_size=50M'; \
    echo 'max_execution_time=300'; \
    echo 'max_input_time=300'; \
    echo 'max_input_vars=3000'; \
    echo 'expose_php=Off'; \
    echo 'display_errors=Off'; \
    echo 'log_errors=On'; \
    echo 'date.timezone=America/Sao_Paulo'; \
    } > /usr/local/etc/php/conf.d/production.ini

# Criar usuário não-root
RUN addgroup -g 1000 laravel && \
    adduser -D -u 1000 -G laravel laravel

# Definir diretório de trabalho
WORKDIR /var/www/html

# Copiar código da aplicação
COPY --chown=laravel:laravel . .

# Copiar dependências do Composer
COPY --from=composer-builder --chown=laravel:laravel /build/vendor ./vendor

# Copiar assets buildados do Node.js
COPY --from=node-builder --chown=laravel:laravel /build/public/desktop ./public/desktop
COPY --from=node-builder --chown=laravel:laravel /build/public/mobile-assets ./public/mobile-assets

# Variáveis de ambiente serão fornecidas pelo Dokploy
# O arquivo .env será criado pelo entrypoint se necessário

# Criar diretórios necessários com permissões corretas
RUN mkdir -p \
    storage/framework/cache/data \
    storage/framework/sessions \
    storage/framework/views \
    storage/framework/testing \
    storage/logs \
    storage/app/public \
    bootstrap/cache \
    public/desktop \
    public/mobile-assets && \
    chown -R laravel:laravel storage bootstrap/cache && \
    chmod -R 775 storage bootstrap/cache && \
    chmod -R 755 public

# Configurar Nginx
COPY --chown=root:root docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY --chown=root:root docker/nginx/default.conf /etc/nginx/http.d/default.conf

# Configurar Supervisor
COPY --chown=root:root docker/supervisor/supervisord.conf /etc/supervisord.conf

# Configurar PHP-FPM
RUN sed -i 's/user = www-data/user = laravel/g' /usr/local/etc/php-fpm.d/www.conf && \
    sed -i 's/group = www-data/group = laravel/g' /usr/local/etc/php-fpm.d/www.conf && \
    sed -i 's/listen = 127.0.0.1:9000/listen = \/var\/run\/php-fpm.sock/g' /usr/local/etc/php-fpm.d/www.conf && \
    sed -i 's/;listen.owner = www-data/listen.owner = laravel/g' /usr/local/etc/php-fpm.d/www.conf && \
    sed -i 's/;listen.group = www-data/listen.group = laravel/g' /usr/local/etc/php-fpm.d/www.conf && \
    sed -i 's/;listen.mode = 0660/listen.mode = 0660/g' /usr/local/etc/php-fpm.d/www.conf

# Otimizar PHP-FPM
RUN echo 'pm = dynamic' >> /usr/local/etc/php-fpm.d/www.conf && \
    echo 'pm.max_children = 50' >> /usr/local/etc/php-fpm.d/www.conf && \
    echo 'pm.start_servers = 5' >> /usr/local/etc/php-fpm.d/www.conf && \
    echo 'pm.min_spare_servers = 5' >> /usr/local/etc/php-fpm.d/www.conf && \
    echo 'pm.max_spare_servers = 15' >> /usr/local/etc/php-fpm.d/www.conf && \
    echo 'pm.max_requests = 500' >> /usr/local/etc/php-fpm.d/www.conf

# Script de entrypoint
COPY --chown=root:root --chmod=755 docker/entrypoint.production.sh /usr/local/bin/entrypoint.sh

# Expor porta HTTP
EXPOSE 80

# Health check otimizado para mais velocidade
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/up || exit 1

# Entrypoint e comando
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
